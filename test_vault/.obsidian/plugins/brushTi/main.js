/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/tool.ts
var parseFrontmatter = async (app) => {
  const files = app.vault.getFiles();
  for (const file of files) {
    if (file.extension == "md") {
      const cache = app.metadataCache.getFileCache(file);
      const frontmatter = cache == null ? void 0 : cache.frontmatter;
      console.log(frontmatter);
      if (typeof frontmatter === "undefined") {
        const content2 = await app.vault.read(file);
        const newContent2 = "---\ntags:\n---\n" + content2;
        await app.vault.modify(file, newContent2);
        console.log(`Added tag frontmatter to ${file.name}`);
      } else {
        const content2 = await app.vault.read(file);
        const frontmatterMatch = content2.match(/^---\n([\s\S]*?)\n---/);
        if (frontmatterMatch) {
          const frontmatterString = frontmatterMatch[0];
          const frontmatterObj = detect(frontmatterString);
          if ("tags" in frontmatterObj) {
            console.log(frontmatter.tags);
          } else {
            app.fileManager.processFrontMatter(file, (frontmatter2) => {
              frontmatter2["tags"] = [];
            });
          }
        }
      }
      const content = await app.vault.read(file);
      const newContent = rmFrontmatter(content);
      const firstline = newContent.split("\n")[0];
      const tags = getFirstLineTags(firstline);
      if (tags != null) {
        console.log(`find first-line tags in ${file.name}: ${tags}`);
        const rcontent = content.replace(firstline, "");
        await app.vault.modify(file, rcontent);
        let tgl = [];
        if (typeof frontmatter != "undefined") {
          tgl = frontmatter["tags"];
        } else {
          tgl = [];
        }
        app.fileManager.processFrontMatter(file, (frontmatter2) => {
          if (frontmatter2["tags"] != null) {
            tags.forEach((tag) => {
              if (!frontmatter2["tags"].includes(tag)) {
                tgl.push(tag);
              }
            });
          } else {
            tgl = tags;
          }
          console.log("taget", tgl);
          frontmatter2["tags"] = tgl;
        });
      }
    }
  }
};
var detect = (frontmatter) => {
  const lines = frontmatter.split("\n");
  const obj = {};
  for (const line of lines) {
    const [key, value] = line.split(":").map((part) => part.trim());
    if (key) {
      obj[key] = value || true;
    }
  }
  return obj;
};
var rmFrontmatter = (content) => {
  const regex = /^---\n([\s\S]*?)\n---\n*/g;
  return content.replace(regex, "");
};
var getFirstLineTags = (content) => {
  const regex = /#\w+/g;
  const matches = content.match(regex);
  let res = [];
  if (matches) {
    matches.forEach((mat) => {
      res.push(mat.replace("#", ""));
    });
    return res;
  } else {
    return null;
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "add-tag-frontmatter-to-all-files",
      name: "add tag frontmatter to all files",
      callback: () => {
        parseFrontmatter(this.app);
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
